datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  posts         Post[]
  comments      Comment[]
  postLikes     PostLikes[]
  commentLikes  CommentLikes[]
  messages      Message[]
  messageRooms  MessageRoom[]
  Notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  displayName  String
  introduction String
  iconImage    String
  bannerImage  String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  updatedAt    DateTime @default(now())
}

model Post {
  id        Int         @id @default(autoincrement())
  title     String      @db.VarChar(100)
  content   String      @db.VarChar(255)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  comments  Comment[]
  postLikes PostLikes[]
  tags      Tag[]
  PostTags  PostTags[]
}

model Comment {
  id           Int            @id @default(autoincrement())
  content      String         @db.VarChar(255)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       Int
  commentLikes CommentLikes[]
  tags         Tag[]
  CommentTags  CommentTags[]
}

model Tag {
  id        Int           @id @default(autoincrement())
  name      String
  posts     PostTags[]
  comments  CommentTags[]
  Post      Post?         @relation(fields: [postId], references: [id])
  postId    Int?
  Comment   Comment?      @relation(fields: [commentId], references: [id])
  commentId Int?
}

model PostTags {
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  tag        Tag     @relation(fields: [tagId], references: [id])
  tagId      Int
  assignedAt DateTime @default(now())

  @@id([postId, tagId])
}

model CommentTags {
  comment    Comment  @relation(fields: [commentId], references: [id])
  commentId  Int
  tag        Tag     @relation(fields: [tagId], references: [id])
  tagId      Int
  assignedAt DateTime @default(now())

  @@id([commentId, tagId])
}

model PostLikes {
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  likedAt DateTime @default(now())

  @@id([postId, userId])
}

model CommentLikes {
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  likedAt   DateTime @default(now())

  @@id([commentId, userId])
}

model Message {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  room      MessageRoom @relation(fields: [roomId], references: [id])
  roomId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
}

model MessageRoom {
  id        Int       @id @default(autoincrement())
  users     User[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
